name: Rocky Linux

on:
  pull_request:
  # github has yet to figure out how to do fast-forward merges without changing the commit hash
  # so we need to rebuild from main to get the correct hash
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Rocky Linux
    runs-on: ubuntu-latest
    container: docker.io/rockylinux/rockylinux:9

    env:
      PKG_CONFIG_PATH: /usr/local/lib/pkgconfig
      CFLAGS: -march=x86-64-v3 -O3 -flto=thin -faddrsig -ffunction-sections -fdata-sections -D_GLIBCXX_ASSERTIONS -D_FORTIFY_SOURCE=3
      LDFLAGS: -Wl,-z,relro -Wl,-z,now -flto=thin -Wl,--gc-sections -Wl,--icf=safe -fuse-ld=lld -Wl,--thinlto-cache-dir=/thinlto_cache -Wl,--thinlto-cache-policy=cache_size_bytes=500m
      CC: ccache clang
      CXX: ccache clang++
      AR: llvm-ar
      NM: llvm-nm
      RANLIB: llvm-ranlib

    steps:
      - uses: actions/checkout@v4

      - name: thinlto cache
        uses: actions/cache@v4
        with:
          path: /thinlto_cache
          key: thinlto_cache-${{ github.run_id }}
          restore-keys: thinlto_cache

      - name: meson wrap cache
        uses: actions/cache@v4
        with:
          path: subprojects/packagecache
          key: meson_wraps-${{ hashFiles('subprojects/*.wrap') }}

      - name: setup cflags
        run: |
          echo "CXXFLAGS=${CFLAGS}" >> "${GITHUB_ENV}"

      - name: install build deps
        run: |
          dnf -y install python3.12-pip gcc-toolset-14 git cmake xz jq 'dnf-command(copr)'
          dnf -y copr enable @fedora-llvm-team/llvm-snapshots centos-stream-9-x86_64
          dnf -y install llvm20-toolset
          pip3.12 install meson ninja

      - name: install ccache
        run: |
          CCACHE_URL="$(curl -s https://api.github.com/repos/ccache/ccache/releases/latest | jq --raw-output '.assets[] | select(.name | test("linux-x86_64.tar.xz$")) | .browser_download_url')"
          curl -s -L "${CCACHE_URL}" | tar --xz --extract
          cp ccache-*-linux-x86_64/ccache /usr/local/bin/ccache

      - uses: hendrikmuhs/ccache-action@v1.2

      - name: install botan
        run: |
          source /opt/rh/gcc-toolset-14/enable
          cd
          curl -s -L https://botan.randombit.net/releases/Botan-3.8.1.tar.xz | tar --xz --extract
          cd Botan-3.8.1
          python3.12 ./configure.py --build-tool=ninja --disable-deprecated-features --without-documentation
          ninja install

      - name: configure
        run: |
          source /opt/rh/gcc-toolset-14/enable
          meson setup --prefix=/root/s3cpp_install --strip --prefer-static --wrap-mode=forcefallback --buildtype=release -Db_lto=true -Db_lto_mode=thin -Db_pie=true build

      - name: compile
        run: |
          source /opt/rh/gcc-toolset-14/enable
          meson compile -C build

      - name: test
        run: |
          source /opt/rh/gcc-toolset-14/enable
          meson test -C build

      - name: install
        run: |
          source /opt/rh/gcc-toolset-14/enable
          meson install -C build

      - name: upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tools
          path: /root/s3cpp_install/bin/*
          if-no-files-found: error

      - name: upload nightly builds
        uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8
        if: github.ref_name == 'main' && github.ref_type == 'branch'
        with:
          prerelease: true
          name: nightly
          tag_name: nightly
          files: /root/s3cpp_install/bin/*
          fail_on_unmatched_files: true
